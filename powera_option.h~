
//this file collect information from various library and make usable
static void get_options (int argc, char **argv)
{
GError *error = NULL;
GOptionContext *option_context;

static gchar *icon_type_string = NULL;
static gboolean list_icon_type = FALSE;
static gboolean list_battery = FALSE;
static GOptionEntry option_entries[] = {
{ "update-interval", 'u', 0, G_OPTION_ARG_INT , &update_interval , "Set update interval (in seconds)" , NULL },
{ "icon-type" , 'i', 0, G_OPTION_ARG_STRING, &icon_type_string, "Set icon type ('standard', 'notification' or 'symbolic')", NULL },
{ "list-icon-types", 't', 0, G_OPTION_ARG_NONE , &list_icon_type , "List available icon types" , NULL },
{ "list-batteries" , 'b', 0, G_OPTION_ARG_NONE , &list_battery , "List available batteries" , NULL },
{ NULL }
};

option_context = g_option_context_new ("[BATTERY ID]");
g_option_context_add_main_entries (option_context, option_entries, NULL);
g_option_context_add_group (option_context, gtk_get_option_group (TRUE));

if (!g_option_context_parse (option_context, &argc, &argv, &error)) {
g_printerr ("cbatticon: %s\n", error->message);
g_error_free (error);
exit (1);
}

g_option_context_free (option_context);

/* option : list available icon types */

if (list_icon_type) {
g_fprintf (stdout, "List of available icon types:\n\n");
g_fprintf (stdout, "Standard type : %s\n", HAS_STANDARD_ICON_TYPE ? "available" : "unavailable");
g_fprintf (stdout, "Notification type : %s\n", HAS_NOTIFICATION_ICON_TYPE ? "available" : "unavailable");
g_fprintf (stdout, "Symbolic type : %s\n", HAS_SYMBOLIC_ICON_TYPE ? "available" : "unavailable");
exit (0);
}

/* option : list available batteries */

if (list_battery) {
g_fprintf (stdout, "List of available batteries:\n\n");
get_battery (NULL, TRUE);
exit (0);
}

/* option : set icon type */

if (icon_type_string) {
if (!g_strcmp0 (icon_type_string, "standard") && (HAS_STANDARD_ICON_TYPE))
icon_type = BATTERY_ICON;
else if (!g_strcmp0 (icon_type_string, "notification") && (HAS_NOTIFICATION_ICON_TYPE))
icon_type = BATTERY_ICON_NOTIFICATION;
else if (!g_strcmp0 (icon_type_string, "symbolic") && (HAS_SYMBOLIC_ICON_TYPE))
icon_type = BATTERY_ICON_SYMBOLIC;
else g_fprintf (stderr, "Unknown icon type: %s\n", icon_type_string);

g_free (icon_type_string);
}

if (icon_type == UNKNOWN_ICON) {
if (HAS_STANDARD_ICON_TYPE)
icon_type = BATTERY_ICON;
else if (HAS_NOTIFICATION_ICON_TYPE)
icon_type = BATTERY_ICON_NOTIFICATION;
else if (HAS_SYMBOLIC_ICON_TYPE)
icon_type = BATTERY_ICON_SYMBOLIC;
else g_fprintf (stderr, "No icon type found!");
}

/* option : set update interval */

if (update_interval < 1)
update_interval = 1;
}

